토픽 구현하기
- 화면 이동(?)
  토픽 미리보기(제목, 댓글 수) -> 토픽 상세화면(제목, 내용, 댓글 수, 북마크 수, 댓글달기)

(1) 토픽 데이터 구조
==================================================================================================================
 <변수 설명>
 * id : 토픽 id
 * title : 토픽 제목
 * contents : 토픽 내용
 * images : 토픽에 사용될 이미지
 * comments : 토픽 댓글(자세한 사항 후술)
 * isMarked : 토픽 북마크 여부
 -----------------------------------------------------------------------------------------------------------------
 const initialTopic = [
    {
      id: /* 토픽 id */,
      title: /* 토픽 제목 */,
      contents: /* 토픽 내용 */,
      images: [/* 토픽 이미지 파일명 목록 */],
      comments: [/* 토픽에 달린 댓글 */],
      isMarked: /* 토픽 북마크 여부 -> [true | false] (=> 북마크한 사용자 id (예정)) */
    },
]
==================================================================================================================
(2) 토픽 미리보기
-----------------------------------------------------------------------------------------------------------------==================================================================================================================
최대 10개까지만 보이도록!
- 포함 사항 : 미리보기 이미지, 토픽 제목, 댓글 수, 북마크 여부
- 미리보기 이미지 -> 토픽 이미지 중 첫 번째 이미지
- 댓글 작성자 중 가장 최근 작성자 5명의 프로필 사진들 보이도록 하기
- 어떤 영역을 클릭해도 이동 가능(북마크 버튼 제외)
==================================================================================================================


==================================================================================================================
(3) 토픽 상세화면
-----------------------------------------------------------------------------------------------------------------
- 토픽의 모든 부분 보여줌(이미지, 댓글수, 북마크수)
- 이미지 수는 최대 5개(?) => calc()로 width를 이미지 수만큼 나눠주기
- 사용자 이미지, 이름은 컴포넌트로 만들기(클릭 시, 프로필 페이지로 이동하게 됨..!/따로)
- 댓글달기 기능
- 대댓달기 기능

==================================================================================================================

(4) 토픽 댓글 
==================================================================================================================
댓글 저장방식 : [{{댓글1},[{댓글1 대댓글}]},{댓글2},...]
참고 
-> https://velog.io/@wkahd01/%EB%8C%80%EB%8C%93%EA%B8%80-%EA%B8%B0%EB%8A%A5-%EB%A7%8C%EB%93%A4%EA%B8%B0-React
-----------------------------------------------------------------------------------------------------------------
 <변수 설명>
  * commentId - 댓글 번호
  * responseTo 
    - 대댓글 여부(처음 생성 -> root / 대댓글 -> responseTo에 부모(?) 댓글 글쓴이 닉네임 포함하기)
    - root가 아니면, reply에 생성되도록 하기!
  * userInfo - 사용자 정보(닉네임, 프로필 사진/카카오에서 받아오기?🤷🏻‍♀️ )
  ** nickname - 댓글 작성자 닉네임
  ** profile - 댓글 작성자 프로필 사진 url()
  * date - 댓글 작성 시간(년,월,일,시,분) -> hidden으로 전달하기
  * comment - 댓글 내용
  * imgUrl - 댓글에 포함된 img 주소
  * heart - 좋아요 개수
----------------------------------------------------------------------------------------------------------------- 
ex)
comments: 
  [
    {
      commentId: 0,
      responseTo: "root",
      userInfo: {
        nickname: "두근두근한 치즈피자",
        profile: "/image/temp.jpg",
      },
      date: { year: 2023, month: 3, day: 14, hour: 21, minute: 2 },
      comment: "다시 가고 싶다ㅠㅠ",
      imgUrl: "/image/vietnam/v_food_6.jpg",
      heart: 3,
    },
  ],
==================================================================================================================
(5) 토픽 댓글 추가하기
1) 댓글 작성 컴포넌트에서 data 가공해주기
 ① 해당하는 토픽 가져와 비구조화 할당해주기
 => 해당하는 토픽만 가져올 수 있다!
 const state = useTopicState();
 ② 현재 토픽의 id와 일치하는 topic을 state에서 가져오기!
 const [변수명] = state.filter(topic=>topic.id===topic_id);  
 cf)// const t2 = Object.assign({}, test); //객체 복사
 ③ 새로운 COMMENT 배열 생성하기
  const newComment = [
    ④ 기존 TOPIC 댓글 객체들 불러오기
    ...TARGET_TOPIC.comments,
    ⑤ 삽입할 comment 객체 생성하기
    {
      commentId: 3,
      userInfo: {
        nickname: "관리자",
        profile: "/image/hamster.jpg",
      },
      comment: commentInput,
      isRoot: true,
      imgUrl: imgFile,
      heart: 0,
    },
  ];
 2) 새로운 댓글 배열 dispatch 해주기
  dispatch({ type: "ADD_COMMENT", id: topic_id, comments: newComment });
 
 3) context에서 댓글 배열 대체해주기
  case 'ADD_COMMENT':
    return state.map(item=>item.id === action.id?{...item,comments:action.comments}:item)
